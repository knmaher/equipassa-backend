version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: equipassa-db
    environment:
      POSTGRES_DB: toollibrary
      POSTGRES_USER: equipassa
      POSTGRES_PASSWORD: equipassa123
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5433:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - equipassa-network

  app:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile
    container_name: equipassa-app
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/toollibrary
      SPRING_DATASOURCE_USERNAME: equipassa
      SPRING_DATASOURCE_PASSWORD: equipassa123
      CLOUD_AWS_REGION_STATIC: eu-central-1
      CLOUD_AWS_CREDENTIALS_ACCESS_KEY: minioadmin
      CLOUD_AWS_CREDENTIALS_SECRET_KEY: minioadmin123
      CLOUD_AWS_S3_ENDPOINT: http://minio:9000
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - equipassa-network

  minio:
    image: minio/minio:latest
    container_name: equipassa-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    networks:
      - equipassa-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 10s
      timeout: 5s
      retries: 5
    entrypoint: [ "/usr/bin/docker-entrypoint.sh", "server", "/data", "--console-address", ":9001" ]

  minio-init:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
      AWS_S3_BUCKET: equipassa   # oder equipassa-bucket, je nachdem was du nutzt
    networks:
      - equipassa-network
    entrypoint: >
      sh -c "\
        mc alias set myminio http://minio:9000 $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD} && \
        mc mb --ignore-existing myminio/$${AWS_S3_BUCKET} \
      "

  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    ports:
      - "1025:1025"   # SMTP port for sending mail
      - "8025:8025"   # Web interface port for viewing mails
    networks:
      - equipassa-network

  redis:
    image: redis:latest
    container_name: equipassa-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - equipassa-network

volumes:
  postgres-data:
  minio-data:
  redis-data:

networks:
  equipassa-network:
    driver: bridge